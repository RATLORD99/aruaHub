local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "AuraHub",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Loading...",
   LoadingSubtitle = "by Aura",
   ShowText = "Aura", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "AmberGlow", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "configuration.txt"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Aura hub",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"King"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

--Noteifications

Rayfield:Notify({
   Title = "Aura Hub",
   Content = "Welcome to Arua",
   Duration = 6.5,
   Image = 4483362458,
})

--info tab

local Tab = Window:InfoTab("Info", "rewind")

local Paragraph = Tab:CreateParagraph({Title = "Updates", Content = "Hello this is a new script hub we will try to Update the scripts weekly"})

--icon img

local Tab = Window:CreateTab("Tab Example", "rewind")

--main menu
local Tab = Window:CreateTab("Event", "rewind") -- Title, Image

local Section = Tab:CreateSection("Beanstalk")

local Toggle = Tab:CreateToggle({
--orb 1
   local arg = {
   1
}
game:GameService("ReplicatedStoage"):WaitForChild("BeanstalkClaimREWard"):FireServer(unpack(args))
--orb 2
local arg = {
   2
}
game:GameService("ReplicatedStoage"):WaitForChild("BeanstalkClaimREWard"):FireServer(unpack(args))
--orb 3
local arg = {
   3
}
game:GameService("ReplicatedStoage"):WaitForChild("BeanstalkClaimREWard"):FireServer(unpack(args))
--orb 4
local arg = {
   4
}
game:GameService("ReplicatedStoage"):WaitForChild("BeanstalkClaimREWard"):FireServer(unpack(args))


   Name = "Collect Event Rewards",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

--disvider

local Divider = Tab:CreateDivider()
Divider:Set(false) -- Whether the divider's visibility is to be set to true or false.

--visablity 
--Rayfield:SetVisibility(false)
--Rayfield:IsVisible()

-- Distroy the interface

Rayfield:Destroy()
